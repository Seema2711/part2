# -*- coding: utf-8 -*-
"""
Created on Wed May 27 10:51:12 2020

@author: Palash
"""

from class_Connector import Connector
from class_Transform import Transform

class BankingProductFee():
    
    def __init__(self, root, RunByUsername, log):
        #root = "E:/CUA OpenBank API/OpenBanking/ETL"
        
        log.logComment("BankingProductFee (010) -> Initialized")
        conn = Connector(root, RunByUsername, log)
        
        self.FailInd = conn.openConnector()
        
        log.logComment("BankingProductFee (010) -> Connection Status: " + str(self.FailInd))
        
        transform = Transform(conn, root, log)
        
        transform.fileList = ['CCC_Fees.csv', 'TeD_Fees.csv', 'TnS_Fees.csv']
        
        transform.df_cols = ['Product ID (Mandatory)', 'CUA Effective From (Mandatory) Date/Time',
                               'Fee type', 'Fee Name', 'Amount (one of these is mandatory)', 
                               'Balance Rate (one of these is mandatory)', 
                               'Transaction Rate (one of these is mandatory)',
                               'Accrued Rate (one of these is mandatory)', 'Accrual Frequency',
                               'Currency (Default)', 'Additionalvalue (AutoGenerated)', 
                               'Additional Information', 'Additional Information URL'
                              ]
        
        transform.joinerColumn = 'Fee Name'
        
        tableQuery = ("select productid, lastUpdated, feeType, name, amount, "
                     "balanceRate, transactionRate, accruedRate, accrualFrequency, "
                     "currency, additionalValue, additionalInfo, additionalInfoUri "
                     "from bankingproductfee").lower()
        
        masterQuery = ("select ID, FeeType FROM MASTER_FEES").lower()
        
        
        insertQuery = ("INSERT INTO bankingproductfee"
                       "(feeid, productid, lastUpdated, feeType, name, amount, "
                       "balanceRate, transactionRate, accruedRate, accrualFrequency, "
                       "currency, additionalValue, additionalInfo, additionalInfoUri,  "
                       "createdOn, createdBy, systemCreatedOn, systemCreatedBy) "
                       "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)").lower()


        
        log.logComment("BankingProductFee (010)   -> Transforming...")
        dataOutput = transform.transformData(masterQuery, tableQuery)
        
        insertData = dataOutput[0]
        insertDataFinal = []
        for d in insertData:
            y = d.split("|")
            
            
            try:
                y[5] = str(float(d.split("|")[5]) * 1)
            
            except:
                y[5] = '0'
            
            try:
                y[6] = str(float(d.split("|")[6]) * 1)
            
            except:
                y[6] = '0'
            
            try:
                y[7] = str(float(d.split("|")[7]) * 1)
            
            except:
                y[7] = '0'
            
            
            try:
                y[4] = str(float(d.split("|")[4]) * 1)
            
            except:
                y[4] = '0'
            
            
            y = '|'.join(y)
            insertDataFinal.append(y)
            
            
        seqQuery = "select max(cast(feeid as decimal)) + 1 from bankingproductfee".lower()
        seq = conn.executeQuery(seqQuery)[0][0]
        if seq == None:
            seq = 1
        
        param = {
                'name' : 'bankingProductDeositRate',
                'insertQuery' : insertQuery,
                'insertSelection' : insertDataFinal,
                'size' : 14,
                'seq' : seq
                }
        
        
        if self.FailInd == 0:
            log.logComment("BankingProductFee (010)   -> Inserting data")
            #transform.insert(**param)
            #transform.insert('bankingProductDeositRate', insertQuery, 8, masterQuery, tableQuery, update = False)
            conn.insertQuery(**param)
            
            conn.closeConnector()
            log.logComment("BankingProductFee (010)   -> Connector Closed")
            
        else:
            log.logComment("BankingProductFee (010)   -> Inserting data -> Failed")
        
        
        
            